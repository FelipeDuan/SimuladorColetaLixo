package simulador.eventos;

import simulador.caminhoes.CaminhaoPequeno;
import simulador.estacoes.EstacaoDeTransferencia;
import simulador.util.ConsoleCor;
import simulador.util.TempoDetalhado;
import simulador.util.TempoUtil;
import simulador.zona.MapeadorZonas;
import simulador.zona.Zona;

/**
 * Evento respons√°vel por realizar a transfer√™ncia de um caminh√£o pequeno para uma esta√ß√£o de transfer√™ncia.
 * <p>
 * Quando executado, calcula o tempo de deslocamento com base na carga e no hor√°rio atual,
 * e agenda a chegada do caminh√£o √† esta√ß√£o por meio de um {@link EventoEstacaoTransferencia}.
 */
public class EventoTransferenciaParaEstacao extends Evento {

    private CaminhaoPequeno caminhaoPequeno;
    private Zona zonaOrigem;

    /**
     * Construtor do evento de transfer√™ncia de caminh√£o pequeno para a esta√ß√£o.
     *
     * @param tempo           o tempo (em minutos) da execu√ß√£o do evento
     * @param caminhaoPequeno o caminh√£o pequeno que ser√° transferido
     * @param zonaOrigem      a zona de onde o caminh√£o est√° partindo
     */
    public EventoTransferenciaParaEstacao(int tempo, CaminhaoPequeno caminhaoPequeno, Zona zonaOrigem) {
        super(tempo);
        this.caminhaoPequeno = caminhaoPequeno;
        this.zonaOrigem = zonaOrigem;
    }

    /**
     * Retorna uma descri√ß√£o resumida do evento, √∫til para logs e monitoramento.
     *
     * @return string contendo caminh√£o, zona de origem e hor√°rio do evento
     */
    @Override
    public String toString() {
        return String.format("EventoTransferencia | Caminh√£o %s | Zona %s | Hor√°rio: %s",
                caminhaoPequeno.getId(),
                zonaOrigem.getNome(),
                TempoUtil.formatarHorarioSimulado(getTempo()));
    }

    /**
     * Executa o evento de transfer√™ncia.
     * <p>
     * Calcula o tempo de deslocamento do caminh√£o pequeno at√© a esta√ß√£o de transfer√™ncia
     * e agenda um {@link EventoEstacaoTransferencia} correspondente para o hor√°rio previsto de chegada.
     */
    @Override
    public void executar() {
        // 1) Seleciona a esta√ß√£o de destino com base na zona de origem
        EstacaoDeTransferencia estacaoDestino = MapeadorZonas.getEstacaoPara(zonaOrigem);

        // 2) Tempo atual da simula√ß√£o
        int tempoAtual = getTempo();

        // 3) Carga transportada pelo caminh√£o
        int cargaAtual = caminhaoPequeno.getCargaAtual();

        // 4) Calcula tempo de deslocamento levando em conta se est√° carregado e se √© hor√°rio de pico
        TempoDetalhado tempoDetalhado = TempoUtil.calcularTempoDetalhado(tempoAtual, cargaAtual, true);

        // 5) Exibe no terminal as informa√ß√µes da transfer√™ncia
        System.out.println(ConsoleCor.AZUL + "================ T R A N S F E R √ä N C I A ===============");
        System.out.printf("[%s] \n", TempoUtil.formatarHorarioSimulado(tempoAtual));
        System.out.printf("Caminh√£o %s ‚Üí Esta√ß√£o %s%n", caminhaoPequeno.getId(), estacaoDestino.getNomeEstacao());
        System.out.printf("  ‚Ä¢ Tempo de trajeto: %s%n", TempoUtil.formatarDuracao(tempoDetalhado.tempoDeslocamento));
        if (tempoDetalhado.tempoExtraCarregado > 0) {
            System.out.printf("  ‚Ä¢ Tempo extra por carga: +%s%n", TempoUtil.formatarDuracao(tempoDetalhado.tempoExtraCarregado));
        }
        System.out.printf("  ‚Ä¢ Tempo total da viagem: %s%n", TempoUtil.formatarDuracao(tempoDetalhado.tempoTotal));
        System.out.printf("  ‚Ä¢ Hor√°rio previsto de chegada: %s%n", TempoUtil.formatarHorarioSimulado(tempoAtual + tempoDetalhado.tempoTotal));
        System.out.println();

        // üîÅ ANIMA√á√ÉO (se estiver no modo gr√°fico)
        if (simulador.ui.SimuladorFXController.isInstanciado()) {
            var controller = simulador.ui.SimuladorFXController.getInstancia();
            String nomeEstacao = estacaoDestino.getNomeEstacao(); // "A" ou "B"
            String nomeCompleto = "Esta√ß√£o " + nomeEstacao;

            controller.animarTransferencia(
                    caminhaoPequeno.getId(),
                    nomeCompleto,
                    caminhaoPequeno.getCargaAtual(),
                    caminhaoPequeno.getCapacidadeMaxima(),
                    tempoDetalhado.tempoTotal
            );
        }

        // 6) Agenda o evento de chegada √† esta√ß√£o
        AgendaEventos.adicionarEvento(
                new EventoEstacaoTransferencia(
                        tempoAtual + tempoDetalhado.tempoTotal,
                        estacaoDestino,
                        caminhaoPequeno
                )
        );
    }
}
